@page "/join/{Guid:guid}"
@using CLUZWeb.Models
@using System.Security.Cryptography
@using System.Text
@inherits Base

<h2>Join</h2>

<EditForm autocomplete="off" Model="@_joinGameModel" OnValidSubmit="HandleValidSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-lg-4">
            <div class="content px-2">
                <InputText class="form-control" placeholder="Password" @bind-Value="@_joinGameModel.Password" />
                <small class="form-text text-muted">Game pin</small>
            </div>
            <div class="content p-4">
                @if (IsJoining)
                {
                    
                    <button class="btn btn-info disabled" disabled><div class="lds-ring"><div></div><div></div><div></div><div></div></div>Join</button>
                }
                else
                {
                    <button class="btn btn-info" type="submit">Join</button>
                }
                @*<button class="btn btn-primary" type="submit">Join</button>*@
            </div>
        </div>
    </div>
</EditForm>

@code{
    [Parameter]
    public Guid Guid { get; set; }
    private bool IsJoining { get; set; } = false;
    private JoinGameForm _joinGameModel = new JoinGameForm();

    private void HandleValidSubmit()
    {
        IsJoining = true;
        Game g = GamePool.Games[Guid];
        //check password and join the game
        if (g.GamePin == ComputeSha256Hash(_joinGameModel.Password)
            && g.Status != GameState.Locked)
        {
            //check if player already in the game
            if (!g.PlayerInGame(GetCurrentUserGuid()))
            {
                Player player = new Player(GetCurrentUserName(), GetCurrentUserGuid(), GetProfilePicture());
                g.AddPlayer(player);
                NavigationManager.NavigateTo($"/gameroom/{g.Guid}");
            }
            else
            {
                NavigationManager.NavigateTo($"/gameroom/{g.Guid}");
            }
        }
        else
        {
            Toaster.Error("Password wrong or game is locked");
        }

        static string ComputeSha256Hash(string rawData)
        {
            // Create a SHA256
            using SHA256 sha256Hash = SHA256.Create();
            // ComputeHash - returns byte array
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

            // Convert byte array to a string
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }

            return builder.ToString();
        }
    }
}