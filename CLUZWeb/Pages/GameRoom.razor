@page "/gameroom/{Guid:guid}"
@using CLUZWeb.Models
@inherits Base
@implements IDisposable

@if (_someoneVoting)
{  
    <div class="overlay" style="display: block;">
        <div class="overlay-text">@(_players.ToList().Find(p => p.AllowedToVote == true).Name) is voting</div>
    </div>
}

@if (_game != null && _player != null)
{
    @if (_game.TimeFrame == 0)
    {
        <div class="sun-show"></div>
    }
    else if (_game.TimeOfDay == TimeOfDay.Day)
    {
        <div class="sun-show"></div>
        <div class="moon-hide"></div>
    }
    else if (_game.TimeOfDay == TimeOfDay.Night)
    {
        <div class="sun-hide"></div>
        <div class="moon-show"></div>
    }
}
else
{
    <h4>Game doesn't exist</h4>
}


@if (_players.Count() == 0)
{
    <p><em>Nothing to display...</em></p>
}
else
{
    <ul class="list-group">
        @foreach (var p in _players)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div class="align-items-center d-flex justify-content-between @IsGhost(p)">
                    @if (p.ProfilePicUrl != "")
                    {
                        <div class="image-cropper margin-right">
                            <img src="@p.ProfilePicUrl" alt="avatar" class="profile-pic">
                        </div>
                    }
                    <div>
                        <h5>@p.Name</h5>
                        <p>
                            @if (_game.AdminGuid == p.Guid)
                            {
                                <span class="badge badge-pill badge-primary">Admin</span>
                            }
                            <span class="badge badge-pill badge-primary">@p.State</span>
                            <span class="badge badge-primary badge-pill">@p.VoteCount</span>
                        </p>
                    </div>
                </div>
                @if (GetActionBtnType() != Models.GameAction.None)
                {
                    <div>
                        <button type="button" class="btn btn-info @(IsDisabledActionBtn(p)?"":"shaky-button")" disabled=@(IsDisabledActionBtn(p)) @onclick="() => Action(p)">@(GetActionBtnType().ToString())</button>
                    </div>
                }
            </li>
        }
    </ul>

    <div class="p-4">
        @*@if (_game.Status == Models.GameState.Locked)
            {
                <button class="btn btn-primary @(IsDisabledReadyBtn()?"":"shaky-button")" disabled=@(IsDisabledReadyBtn()) @onclick="() => Ready(_player)">
                    Ready
                </button>
            }*@

        @if (_game.AdminGuid == _player.Guid && !(_game.Status == Models.GameState.Locked))
        {
            <button class="btn btn-primary float-left" @onclick="() => Start(_game)">
                Start
            </button>
        }

        @*<Confirmation Name="Leave"
            OnClickCallback="@(() => Leave(_game))" />*@
    </div>
}
